@using Syncfusion.EJ2.InteractiveChat

<div class="integration-texttospeech-section">
    @Html.EJS().AIAssistView("aiAssistView").BannerTemplate("#bannerContent").StopRespondingClick("stopRespondingClick").PromptRequest("onPromptRequest").Created("onCreated").ToolbarSettings(new AIAssistViewToolbarSettings()
    {
        Items = ViewBag.Items,
        ItemClicked = "toolbarItemClicked"
    }).ResponseToolbarSettings(new AIAssistViewResponseToolbarSettings()
    {
        Items = ViewBag.ResponseItems,
        ItemClicked = "onResponseToolbarItemClicked"
    }).Render()
</div>

<!-- Add antiforgery token for POST requests -->
@Html.AntiForgeryToken()

<script id="bannerContent" type="text/x-jsrender">
    <div class="banner-content">
        <div class="e-icons e-audio"></div>
        <i>Ready to assist voice enabled !</i>
    </div>
</script>

<script src="https://cdn.jsdelivr.net/npm/marked@latest/marked.min.js"></script>

<script>
    var assistObj = null;
    var stopStreaming = false;
    var currentUtterance;

    // Initializes the AIAssistView component reference when created
    function onCreated() {
        assistObj = ej.base.getComponent(document.getElementById("aiAssistView"), "aiassistview");
    }

    // Handles toolbar item clicks, such as clearing the conversation on refresh
    function toolbarItemClicked(args) {
        if (args.item.iconCss === 'e-icons e-refresh') {
            assistObj.prompts = [];
            stopStreaming = true;
        }
    }

    // Handles clicks on response toolbar items, such as copying, reading aloud, liking, or disliking the response
    function onResponseToolbarItemClicked(args) {
        const responseHtml = assistObj.prompts[args.dataIndex].response;
        if (responseHtml) {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = responseHtml;
            const text = (tempDiv.textContent || tempDiv.innerText || '').trim();
            if (args.item.iconCss === 'e-icons e-audio' || args.item.iconCss === 'e-icons e-assist-stop') {
                if (currentUtterance) {
                    speechSynthesis.cancel();
                    currentUtterance = null;
                    assistObj.responseToolbarSettings.items[1].iconCss = 'e-icons e-audio';
                    assistObj.responseToolbarSettings.items[1].tooltip = 'Read Aloud';
                } else {
                    const utterance = new SpeechSynthesisUtterance(text);
                    utterance.onend = () => {
                        currentUtterance = null;
                        assistObj.responseToolbarSettings.items[1].iconCss = 'e-icons e-audio';
                        assistObj.responseToolbarSettings.items[1].tooltip = 'Read Aloud';
                    };
                    speechSynthesis.speak(utterance);
                    currentUtterance = utterance;
                    assistObj.responseToolbarSettings.items[1].iconCss = 'e-icons e-assist-stop';
                    assistObj.responseToolbarSettings.items[1].tooltip = 'Stop';
                }
            }
        }
    }

    // Streams the AI response character by character to create a typing effect
    async function streamResponse(response) {
        let lastResponse = '';
        const responseUpdateRate = 10;
        let i = 0;
        const responseLength = response.length;
        while (i < responseLength && !stopStreaming) {
            lastResponse += response[i];
            i++;
            if (i % responseUpdateRate === 0 || i === responseLength) {
                const htmlResponse = marked.parse(lastResponse);
                assistObj.addPromptResponse(htmlResponse, i === responseLength);
                assistObj.scrollToBottom();
            }
            await new Promise(resolve => setTimeout(resolve, 15)); // Delay for streaming effect
        }
    }

    // Handles prompt requests by sending them to the server API endpoint and streaming the response
    function onPromptRequest(args) {
        // Get antiforgery token
        var tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        var token = tokenElement ? tokenElement.value : '';

        if (!token) {
            assistObj.addPromptResponse('⚠️ Antiforgery token not found.');
            return;
        }

        fetch('/Home/GetAIResponse', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ prompt: args.prompt || 'Hi' })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(responseText => {
            const text = responseText.trim() || 'No response received.';
            stopStreaming = false;
            streamResponse(text);
        })
        .catch(error => {
            console.error('Error fetching AI response:', error);
            assistObj.addPromptResponse('⚠️ Something went wrong while connecting to the AI service. Please try again later.');
            stopStreaming = true;
        });
    }

    // Stops the ongoing streaming response
    function stopRespondingClick() {
        stopStreaming = true;
    }
</script>

<style>
    .integration-texttospeech-section {
        height: 450px;
        width: 650px;
        margin: 0 auto;
    }

    .integration-texttospeech-section .e-view-container {
        margin: auto;
    }

    .integration-texttospeech-section .e-banner-view {
        margin-left: 0;
    }

    .integration-texttospeech-section .banner-content .e-audio:before {
        font-size: 25px;
    }

    .integration-texttospeech-section .banner-content {
        display: flex;
        flex-direction: column;
        gap: 10px;
        text-align: center;
    }
</style>