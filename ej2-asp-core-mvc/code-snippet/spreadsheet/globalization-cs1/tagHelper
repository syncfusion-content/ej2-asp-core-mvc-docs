@{
    var localeFormats = ViewBag.LocaleFormats as Dictionary<string, List<object>>;
}

<div id="wrapper">
    <ejs-dropdownlist id="ddlelement" index="0" dataSource="ViewBag.CultureList" placeholder="Select a locale" change="change" width="150px" popupHeight="220px">
        <e-dropdownlist-fields text="Culture" value="Locale"></e-dropdownlist-fields>
    </ejs-dropdownlist>
    <ejs-spreadsheet id="spreadsheet" locale="de" listSeparator=";" created="created">
        <e-spreadsheet-sheets>
            <e-spreadsheet-sheet>
                <e-spreadsheet-ranges>
                    <e-spreadsheet-range dataSource="ViewBag.DefaultData"></e-spreadsheet-range>
                </e-spreadsheet-ranges>
                <e-spreadsheet-columns>
                    <e-spreadsheet-column width="120"></e-spreadsheet-column>
                    <e-spreadsheet-column width="180"></e-spreadsheet-column>
                    <e-spreadsheet-column width="100"></e-spreadsheet-column>
                    <e-spreadsheet-column width="120"></e-spreadsheet-column>
                    <e-spreadsheet-column width="120"></e-spreadsheet-column>
                </e-spreadsheet-columns>
            </e-spreadsheet-sheet>
        </e-spreadsheet-sheets>
    </ejs-spreadsheet>
</div>

<script>
    var localeFormats = @Html.Raw(Json.Serialize(localeFormats));

    function loadCultureFiles (localeOptions) {
        for (var locale = 0; locale < localeOptions.length; locale++) {
            var files = ['ca-gregorian', 'currencies', 'numbers', 'timeZoneNames', 'numberingSystems'];
            var loadCulture = function (fileName) {
                var url = './cldr-data/' + (fileName === 'numberingSystems' ? '' : (localeOptions[locale] + '/')) + fileName + '.json';
                var ajax = new ej.base.Ajax(url, 'GET', false);
                ajax.onSuccess = (value) => ej.base.loadCldr(JSON.parse(value));
                ajax.send();
            };
            for (var prop = 0; prop < files.length; prop++) {
                loadCulture(files[prop]);
            }
        }
    }
    loadCultureFiles(['de', 'fr-CH', 'zh']);

    // Setting German culture.
    ej.base.setCulture('de');
    // Setting currency code for the German culture.
    ej.base.setCurrencyCode('EUR');

    // Mapping default number formats for the 'de' locale before the spreadsheet is created.
    ej.spreadsheet.configureLocalizedFormat(null, localeFormats['de']);

    function created() {
        var spreadsheet = ej.base.getComponent(document.getElementById('spreadsheet'), 'spreadsheet');
        spreadsheet.cellFormat({ fontWeight: 'bold', textAlign: 'center' }, 'A1:H1');
        applyFormats();
    }

    function change(args) {
        var spreadsheet = ej.base.getComponent(document.getElementById('spreadsheet'), 'spreadsheet');
        var localeOption = args.value.split(' ');
        // Setting the culture name like 'de', 'fr-CH', 'zh', and 'en-US'.
        var cultureName = localeOption[0];
        ej.base.setCulture(cultureName);
        // Setting the currency code for the selected locale like 'EUR', 'CNY', 'CHF', and 'USD'.
        ej.base.setCurrencyCode(localeOption[1]);
        // Mapping the default number format codes for the selected locale.
        ej.spreadsheet.configureLocalizedFormat(spreadsheet, localeFormats[cultureName]);
        // Setting the culture for the spreadsheet.
        spreadsheet.locale = cultureName;
        // Setting the list separator for the selected locale.
        spreadsheet.listSeparator = localeOption[2];
        // Refreshing the changes immediately in the spreadsheet.
        spreadsheet.dataBind();
        applyFormats();
    }

    function applyFormats() {
        var spreadsheet = ej.base.getComponent(document.getElementById('spreadsheet'), 'spreadsheet');
        // Apply format to the specified range in the active sheet.
        // The getFormatFromType method returns the culture-based format code based on the mapped formats.
        // If a format ID is not mapped or is not applicable, it will return the format code based on the loaded culture.
        spreadsheet.numberFormat(ej.spreadsheet.getFormatFromType('ShortDate'), 'B2:B11');
        spreadsheet.numberFormat(ej.spreadsheet.getFormatFromType('Time'), 'C2:C11');
        spreadsheet.numberFormat(ej.spreadsheet.getFormatFromType('Currency'), 'E2:F11');
        spreadsheet.numberFormat(ej.spreadsheet.getFormatFromType('Accounting'), 'H2:H11');
        // The percentage format code will be '0.00%' for all the cultures.
        spreadsheet.numberFormat('0.00%', 'G2:G11');
    }
</script>
