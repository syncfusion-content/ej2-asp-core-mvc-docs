@Html.EJS().DropDownButton("element").Content("Print").Items((IEnumerable<object>)ViewBag.items).Select("itemSelect").Render()
<input type="checkbox" id="gridline" /><label for="gridline">Allow Grid Lines</label>
<input type="checkbox" id="header" /><label for="header">Allow Row Column Header</label>

@Html.EJS().Spreadsheet("spreadsheet").OpenUrl("Open").AllowOpen(true).SaveUrl("Save").AllowSave(true).created("created").Sheets(sheet =>
{
    sheet.Name("Budget").Ranges(ranges =>
    {
        ranges.DataSource((IEnumerable<object>)ViewBag.budgetData).StartCell("A1").Add();
    }).Columns(column =>
    {
        column.Width(100).Add();
        column.Width(100).Add();
        column.Width(100).Add();
        column.Width(100).Add();
    }).Add();
    sheet.Name("Salary").Ranges(ranges =>
    {
        ranges.DataSource((IEnumerable<object>)ViewBag.salaryData).StartCell("A1").Add();
    }).Columns(column =>
    {
        column.Width(100).Add();
        column.Width(100).Add();
        column.Width(100).Add();
        column.Width(100).Add();
    }).Add();
}).Render()

<script>

    function created() {
        this.cellFormat({ fontWeight: 'bold', textAlign: 'center' }, 'A1:D1');
        this.cellFormat({ fontWeight: 'bold' }, 'A11:D11');
    }

    function itemSelect(args) {
        var spreadsheetObj = document.getElementById("spreadsheet").ej2_instances[0];
        if (spreadsheetObj) {
            const allowGridLines = document.getElementById('gridline');
            const allowRowColumnHeader = document.getElementById('header');
            spreadsheetObj.print({
                type: args.item.text,
                allowGridLines: allowGridLines.checked,
                allowRowColumnHeader: allowRowColumnHeader.checked
            });
        }
    }

</script>
