@Html.EJS().Button("getFilterData").Content("Get Filtered Data").Render();
@Html.EJS().Spreadsheet("spreadsheet").AllowFiltering(true).Created("created").Sheets((sheet) =>
{
    sheet.Ranges((ranges) =>
    {
        ranges.DataSource(@ViewBag.DefaultData).Add();
    }).Add();
}).Render()

<script>

    function created() {
        // Applies cell formatting to specified range of the active sheet
        this.cellFormat({ fontWeight: 'bold', textAlign: 'center', verticalAlign: 'middle' }, 'A1:F1');
        // Construct the predicate model to be updated to the data.
        var predicates = [{
            field: 'C',
            operator: 'equal',
            value: 'Pink',
            matchCase: false
        }];
        // Apply filter to the specified range.
        this.applyFilter(predicates, 'A1:C7');
    }

    document.getElementById("getFilterData").addEventListener('click', function () {
        var spreadsheet = document.getElementById("spreadsheet").ej2_instances[0];
        var activeSheet = spreadsheet.getActiveSheet();
        var usedRange = activeSheet.usedRange;
        for (var i = 0; i <= usedRange.rowIndex; i++) {
            // Get the filtered row using isFiltered property.
            var filteredRow = (activeSheet.rows[i]).isFiltered;
            if (!filteredRow) {
                var rowData = spreadsheet.getRowData(i);
                console.log("Row:", i + 1, "Cells", rowData);
            }
        }
    });

</script>