@{
    Object filterTemplate = new Object();
    filterTemplate = (new { create = "create", read = "read", write = "write" });
}
@Html.EJS().Grid("grid").DataSource((IEnumerable<object>)ViewBag.dataSource).Height("348px").Columns(col =>
{
    col.Field("OrderID").HeaderText("Order ID").Width("120").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("EmployeeID").HeaderText("Employee Name").Width("150").FilterBarTemplate(filterTemplate).ForeignKeyField("EmployeeID").ForeignKeyValue("FirstName").DataSource((IEnumerable<object>)ViewBag.foreignData).Add();
    col.Field("OrderDate").HeaderText("Order Date").Width("130").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Format("yMd").Add();
    col.Field("Freight").HeaderText("Freight").Width("120").Format("C2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("ShipCountry").HeaderText("Ship Country").Width("120").Add();
}).AllowFiltering().Render()
<script>
    function create (args) {
        return document.createElement('input', { className: 'filter-input' });
    }
    function write (args) {
        var employeeData = @Html.Raw(Json.Encode(ViewBag.foreignData));
        employeeData.splice(0, 0, { 'FirstName': 'All' }); // for clear filtering
        var dropInstance = new ej.dropdowns.DropDownList({
            dataSource: new ej.data.DataManager(employeeData),
            fields: { text: 'FirstName' },
            placeholder: 'Select a value',
            popupHeight: '200px',
            index: 0,
            change: (args) => {
                var grid = document.getElementById("grid").ej2_instances[0];
                if (args.value !== 'All') {
                    grid.filterByColumn('EmployeeID', 'equal', args.value);
                }
                else {
                    grid.clearFiltering(['EmployeeID']);
                }
            }
        });
        dropInstance.appendTo(args.element);
    }
</script>

