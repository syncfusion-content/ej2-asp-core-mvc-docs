@Html.EJS().Grid("grid").DataSource((IEnumerable<object>)ViewBag.dataSource).Height("348px").Columns(col =>
{
    col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).Width("120").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("EmployeeID").HeaderText("Employee Name").Width("140").ForeignKeyValue("FirstName").DataSource(ViewBag.foreignData).Edit(new { create = "create", read = "read", destroy = "destroy", write = "write" }).Add();
    col.Field("Freight").HeaderText("Freight").Width("120").Format("C2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("ShipName").HeaderText("Ship Name").Width("160").Add();
    col.Field("ShipCountry").HeaderText("Ship Country").Width("150").EditType("dropdownedit").Add();
}).Toolbar(new List<string>() {"Edit", "Update", "Cancel" }).EditSettings(edit => { edit.AllowEditing(true);}).Render()

<script>
    var autoComplete;
    var employeeData = @Html.Raw(Json.Encode(ViewBag.foreignData));
    function create() { // to create input element
        return document.createElement('input');
    }
    function read () { // return edited value to update data source
       var value = new ej.data.DataManager(employeeData).executeLocal(new ej.data.Query().where('FirstName', 'equal', autoComplete.value));
       return value.length && value[0]['EmployeeID']; // to convert foreign key value to local value.
    }
    function destroy () { // to destroy the custom component.
       autoComplete.destroy();
    }
    function write (args) { // to show the value for custom component
       autoComplete = new ej.dropdowns.AutoComplete({
            dataSource: employeeData,
            fields: { value: args.column.foreignKeyValue },
            value: args.foreignKeyData[0][args.column.foreignKeyValue]
        });
       autoComplete.appendTo(args.element);
}
</script>