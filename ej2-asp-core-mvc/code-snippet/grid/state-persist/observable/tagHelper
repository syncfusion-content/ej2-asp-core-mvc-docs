@{
    List<object> filterColumns = new List<object>();
    filterColumns.Add(new { field = "CustomerID", matchCase = false, @operator = "startswith", predicate = "and", value = "A" });
}
@{
    List<object> sortOptions = new List<object>();
    sortOptions.Add(new { field = "OrderID", direction = "Decending" });
 }
<ejs-grid id="grid" allowPaging='true' allowFiltering="true" allowSorting="true" allowGrouping="true" created="created" dataStateChange="dataStateChange" enablePersistence="true"> 
    <e-grid-pagesettings pageSize="12", currentPage="2"></e-grid-pagesettings>
    <e-grid-filterSettings columns="filterColumns"></e-grid-filterSettings>
    <e-grid-sortsettings columns="sortOptions"></e-grid-sortsettings>
    <e-grid-groupsettings columns="@(new string[] {"ShipCity"})"></e-grid-groupsettings>
    <e-grid-columns>
        <e-grid-column field="OrderID" headerText="Order ID" isPrimaryKey="true" textAlign="Right" width="120"></e-grid-column>
        <e-grid-column field="CustomerID" headerText="Customer Name" width="150" ></e-grid-column>
        <e-grid-column field="ShipCity" headerText="ShipCity" width="150"></e-grid-column>
        <e-grid-column field="ShipName" headerText="Ship Name" width="150" ></e-grid-column>
    </e-grid-columns>
</ejs-grid>
<script>
    function created() {
        const grid = document.getElementById("grid").ej2_instances[0];
        const query = grid.getDataModule().generateQuery();
        const state = ej.grids.getStateEventArgument(query);
        dataStateChange(state);
    }
    function dataStateChange(state) {
        const grid = document.getElementById("grid").ej2_instances[0];
        getData(state).then((data) => (grid.dataSource = data));
    }
    async function getData(state) {
        const BASE_URL ='https://services.odata.org/V4/Northwind/Northwind.svc/Orders';
        const pageQuery = `$skip=${state.skip}&$top=${state.take}`;
        let sortQuery = '';
        let filterQuery = '';
        if ((state.sorted || []).length) {
            sortQuery =`&$orderby=` + state.sorted.map((obj) =>
                obj.direction === 'descending' ? `${obj.name} desc` : obj.name
            ).reverse().join(',');
        }
        if (state.where) {
            filterQuery =`&$filter=` + state.where.map((obj) => {
                return obj.predicates.map((predicate) => {
                    return predicate.operator === 'equal'? `${predicate.field} eq ${predicate.value}`: `${predicate.operator}(tolower(${predicate.field}),'${predicate.value}')`;
                }).reverse().join(' and ');
            });
        }
        const request = `${BASE_URL}?${pageQuery}${sortQuery}${filterQuery}&$count=true`;
        const response = await fetch(request);
        const data = await response.json();
        return {
            result: data['value'],
            count: parseInt(data['@@odata.count'], 10),
        };
    }
</script>