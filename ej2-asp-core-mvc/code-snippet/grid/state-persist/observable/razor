@{
    List<object> filterColumns = new List<object>();
    filterColumns.Add(new { field = "CustomerID", matchCase = false, @operator = "startswith", predicate = "and", value = "A" });
}
@{
    List<object> sortOptions = new List<object>();
    sortOptions.Add(new { field = "OrderID", direction = "Descending" });
}
@Html.EJS().Grid("grid").AllowPaging(true).AllowFiltering(true).AllowSorting(true).AllowGrouping(true).EnablePersistence(true).Columns(col =>
{
    col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).Width("120").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("CustomerID").HeaderText("Customer Name").Width("170").Add();
    col.Field("ShipCity").HeaderText("ShipCity").Width("120").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("ShipName").HeaderText("Ship Name").Width("170").Add();
}).Created("created").DataStateChange("dataStateChange").GroupSettings(group => { group.ShowGroupedColumn(false).Columns(new string[] { "ShipCity" }); }).FilterSettings(filter => filter.Columns(filterColumns)).SortSettings(sort => sort.Columns(sortOptions)).PageSettings(page => page.PageCount(10)).Render()
<script>
    function created() {
        const grid = document.getElementById("grid").ej2_instances[0];
        const query = grid.getDataModule().generateQuery(); // Generate the initial query state from the Grid's data module.
        const state = ej.grids.getStateEventArgument(query); // Retrieve the Grid's current state based on the generated query.
        dataStateChange(state); // Send the retrieved state to the service to fetch data accordingly.
    }
    function dataStateChange(state) {
        const grid = document.getElementById("grid").ej2_instances[0];
        getData(state).then((data) => (grid.dataSource = data));
    }
    async function getData(state) {
        const BASE_URL ='https://services.odata.org/V4/Northwind/Northwind.svc/Orders';
        const pageQuery = `$skip=${state.skip}&$top=${state.take}`;
        let sortQuery = '';
        let filterQuery = '';
        if ((state.sorted || []).length) {
            sortQuery =`&$orderby=` + state.sorted.map((obj) =>
                obj.direction === 'descending' ? `${obj.name} desc` : obj.name
            ).reverse().join(',');
        }
        if (state.where) {
            filterQuery =`&$filter=` + state.where.map((obj) => {
                return obj.predicates.map((predicate) => {
                    return predicate.operator === 'equal'? `${predicate.field} eq ${predicate.value}`: `${predicate.operator}(tolower(${predicate.field}),'${predicate.value}')`;
                }).reverse().join(' and ');
            });
        }
        const request = `${BASE_URL}?${pageQuery}${sortQuery}${filterQuery}&$count=true`;
        const response = await fetch(request);
        const data = await response.json();
        return {
            result: data['value'],
            count: parseInt(data['@@odata.count'], 10),
        };
    }
</script>