@{
    string fullUrl = $"{Request.Scheme}://{Request.Host}{Request.PathBase}{Request.Path}";
}
@Html.AntiForgeryToken()
<ejs-grid id="grid" created="created" allowExcelExport="true" allowPdfExport="true" allowPaging="true"  toolbar="@(new List<string>() {"ExcelExport", "PdfExport"})" toolbarClick="toolbarClick" excelExportComplete="exportComplete" pdfExportComplete="exportComplete" dataStateChange="dataStateChange" >
    <e-grid-columns>
        <e-grid-column field="OrderID" headerText="Order ID" isPrimaryKey="true" textAlign="Right" width="140"></e-grid-column>
        <e-grid-column field="CustomerName" headerText="Customer Name" width="150"></e-grid-column>
        <e-grid-column field="ProductID" headerText="Product ID" textAlign="Right" width="140"></e-grid-column>
        <e-grid-column field="ProductName" headerText="Product Name" textAlign="Right" width="140"></e-grid-column>
    </e-grid-columns>
</ejs-grid>
<script>
    var gridData;
    var state = {
        skip: 0,
        take: 12
    };
    function exportComplete() {
        const grid = document.getElementById("grid").ej2_instances[0];
        grid.hideSpinner(); // hide the spinner when export completed
    }
    // triggers at initial render of the Grid
    function created() {
        // initial state needs to be sent manually
        dataStateChange(state);
    }
    function dataStateChange(state) {
        const grid = document.getElementById("grid").ej2_instances[0];

        getOrders(state).then((event) => {
            grid.dataSource = event.result; // Assign the result to the data property
        });
    }
    function toolbarClick(args) {
        const grid = document.getElementById("grid").ej2_instances[0];

        let state = { action: {}, skip: 0, take: grid.pageSettings.totalRecordsCount };
        switch (args.item.text) {
            case "PDF Export":
                grid.showSpinner(); // show the spinner when send the post to service
                state.action.isPdfExport = true;
                // fetch the entire data while PDF exporting
                getOrders(state).then((event) => {
                    let pdfExportProperties = {
                        dataSource: event.result.result
                    };
                    grid.pdfExport(pdfExportProperties); // need to call pdfExport method of grid when get the entire data
                });
                break;
            case "Excel Export":
                // fetch the entire data while Excel exporting
                grid.showSpinner();// show the spinner when send the post to service
                state.action.isExcelExport = true;
                getOrders(state).then((event) => {
                    let excelExportProperties = {
                        dataSource: event.result.result
                    };
                    grid.excelExport(excelExportProperties);// need to call excelExport method of grid when get the entire data
                });
                break;
        }
    }
    function getOrders(state, action) {
        const query = new ej.data.Query();
        // page
        applyPaging(query, state)
        query.isCountRequired = true
        var fetchRequest = new ej.base.Fetch({
            url: `@fullUrl?handler=GetOrderData`,
            type: 'POST',
            beforeSend: function (args) {
                args.fetchRequest.headers.set('XSRF-TOKEN', document.querySelector('input[type = "hidden"][name = "__RequestVerificationToken"]').value);
            },
        })
        return fetchRequest.send()
            .then(data => {
                // Create a DataManager instance with your fetched data
                gridData = new ej.data.DataManager(data.result);
                // Execute local data operations using the provided query
                const result = gridData.executeLocal(query);
                // Return the result along with the count of total records
                return {
                    result: result, // Result of the data
                    count: result.count // Total record count based on fetched data length
                };
            });
    }
    const applyPaging = (query, state) => {
        // Check if both 'take' and 'skip' values are available
        if (state.take && state.skip) {
            // Calculate pageSkip and pageTake values to get pageIndex and pageSize
            const pageSkip = state.skip / state.take + 1;
            const pageTake = state.take;
            query.page(pageSkip, pageTake);
        }
        // If if only 'take' is available and 'skip' is 0, apply paging for the first page.
        else if (state.skip === 0 && state.take) {
            query.page(1, state.take);
        }
    }
</script>
