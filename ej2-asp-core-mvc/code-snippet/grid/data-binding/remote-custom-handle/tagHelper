@{
    List<object> filterColumns = new List<object>();
    filterColumns.Add(new { field = "CustomerName", matchCase = false, @operator = "startswith", predicate = "and", value = "Maria" });
    List<object> sortOptions = new List<object>();
    sortOptions.Add(new { field = "ProductID", direction = "Descending" });
    string fullUrl = $"{Request.Scheme}://{Request.Host}{Request.PathBase}{Request.Path}";
}
@Html.AntiForgeryToken()
<ejs-grid id="grid" created="created" allowPaging="true" allowGrouping="true" dataSourceChanged="dataSourceChanged" dataStateChange="dataStateChange" allowSorting="true" allowFiltering="true" toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Update", "Cancel","Search"})">
    <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
    <e-grid-groupSettings enableLazyLoading="true" showGroupedColumn="true" columns="@(new string[] {"ProductName"})"></e-grid-groupSettings>    
    <e-grid-sortsettings columns="sortOptions"></e-grid-sortsettings>
    <e-grid-filterSettings columns="filterColumns"></e-grid-filterSettings>
    <e-grid-columns>
        <e-grid-column field="OrderID" headerText="Order ID" isPrimaryKey="true" textAlign="Right" width="140"></e-grid-column>
        <e-grid-column field="CustomerName" headerText="Customer Name" width="150"></e-grid-column>
        <e-grid-column field="ProductID" headerText="Product ID" textAlign="Right" width="140"></e-grid-column>
        <e-grid-column field="ProductName" headerText="Product Name" textAlign="Right" width="140"></e-grid-column>
    </e-grid-columns>
</ejs-grid>
<script>
    var gridData;
    var state = {
        skip: 0,
        take: 12,
        group: {
            enableLazyLoading: true,
            columns: ["ProductName"],
            showGroupedColumn: true
        },
        sort: { columns: [{ field: 'ProductID', direction: 'Descending' }] },
        filter: { columns: [{ field: 'CustomerName', matchCase: false, operator: 'startswith', predicate: 'and', value: 'Maria' }] }
    };
    function created() {
        dataStateChange(state)
    }
    function dataStateChange(state) {
        const grid = document.getElementById("grid").ej2_instances[0];
        const query = grid.getDataModule().generateQuery();
        getOrders(state, query).then(gridData => {
            grid.dataSource = gridData.result; // Assign the result to the data property
        });
    }
    function dataSourceChanged(state) {
        if (state.action === 'add') {
            addRecord(state.data, state).then(() => {
                state.endEdit();
            });
        } else if (state.action === 'edit') {
            updateRecord(state.data, state).then(() => {
                state.endEdit();
            });
        } else if (state.requestType === 'delete') {
            deleteRecord(state.data[0].orderID, state).then(() => {
                state.endEdit();
            });
        }
    }
    function getOrders(state, action) {
        const query = new ej.data.Query();
        // filter
        if (state.where) {
            applyFiltering(query, action.queries);
        }
        // search
        if (state.search) {
            applySearching(query, state.search);
        };
        // sort
        if (state.sorted) {
            state.sorted.length ? applySorting(query, state.sorted) :
            // initial sorting
            state.sorted.columns.length ? applySorting(query, state.sorted.columns) : null
        }
        // grouping
        if (state.group) {
            state.group.length ? applyGrouping(query, state.group) :
            // initial grouping
            state.group.columns.length ? applyGrouping(query, state.group.columns) : null
        }
        // lazy load grouping
        if (state.group) {
            if (state.isLazyLoad) {
                applyLazyLoad(query, state)
            }
            if (state.group.enableLazyLoading) {
                query.lazyLoad.push({ key: 'isLazyLoad', value: true })
            }
        }
        // page
        applyPaging(query, state)
        query.isCountRequired = true
        var fetchRequest = new ej.base.Fetch({
            url: `@fullUrl?handler=GetOrderData`,
            type: 'POST',
            beforeSend: function (args) {
                args.fetchRequest.headers.set('XSRF-TOKEN', document.querySelector('input[type = "hidden"][name = "__RequestVerificationToken"]').value);
            },
        })
        return fetchRequest.send()
            .then(data => {
                // Create a DataManager instance with your fetched data
                gridData = new ej.data.DataManager(data.result);
                // Execute local data operations using the provided query
                const result = gridData.executeLocal(query);
                // Return the result along with the count of total records
                return {
                    result: result, // Result of the data
                    count: result.count // Total record count based on fetched data length
                };
            });

    }
    const applyFiltering = (query, filter) => {
        // Check if filter columns are specified
        if (filter.columns && filter.columns.length) {
            // Apply filtering for each specified column
            for (let i = 0; i < filter.columns.length; i++) {
                const field = filter.columns[i].field;
                const operator = filter.columns[i].operator;
                const value = filter.columns[i].value;
                query.where(field, operator, value);
            }
        }
        else {
            // Apply filtering based on direct filter conditions
            for (let i = 0; i < filter.length; i++) {
                const { fn, e } = filter[i];
                if (fn === 'onWhere') {
                    query.where(e);
                }
            }
        }
    }
    // Apply searching
    const applySearching = (query, search) => {
        // Check if a search operation is requested
        if (search && search.length > 0) {
            // Extract the search key and fields from the search array
            const { fields, key } = search[0];
            // perform search operation using the field and key on the query
            query.search(key, fields);
        }
    }
    // Apply sorting
    const applySorting = (query, sorted) => {
        // Check if sorting data is available
        if (sorted && sorted.length > 0) {
            // Iterate through each sorting info
            sorted.forEach(sort => {
                // Get the sort field name either by name or field
                const sortField = sort.name || sort.field;
                // Perform sort operation using the query based on the field name and direction
                query.sortBy(sortField, sort.direction);
            });
        }
    }
    // Apply grouping
    const applyGrouping = (query, group) => {
        // Check if sorting data is available
        if (group.length > 0) {
            // Iterate through each group info
            group.forEach((column) => {
                // perform group operation using the column on the query
                query.group(column);
            });
        }
    }
    // Apply lazy load grouping
    const applyLazyLoad = (query, payload) => {
        // Configure lazy loading for the main data
        if (payload.isLazyLoad) {
            query.lazyLoad.push({ key: 'isLazyLoad', value: true });
            // If on-demand group loading is enabled, configure lazy loading for grouped data
            if (payload.onDemandGroupInfo) {
                query.lazyLoad.push({
                    key: 'onDemandGroupInfo',
                    value: payload.action.lazyLoadQuery,
                });
            }
        }
    }
    const applyPaging = (query, state) => {
        // Check if both 'take' and 'skip' values are available
        if (state.take && state.skip) {
            // Calculate pageSkip and pageTake values to get pageIndex and pageSize
            const pageSkip = state.skip / state.take + 1;
            const pageTake = state.take;
            query.page(pageSkip, pageTake);
        }
        // If if only 'take' is available and 'skip' is 0, apply paging for the first page.
        else if (state.skip === 0 && state.take) {
            query.page(1, state.take);
        }
    }
    function addRecord(order) {
        var fetchRequest = new ej.base.Fetch({
            url: `@fullUrl?handler=AddOrder`,
            type: 'POST',
            beforeSend: function (args) {
                args.fetchRequest.headers.set('XSRF-TOKEN', document.querySelector('input[type = "hidden"][name = "__RequestVerificationToken"]').value);
            },
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(order)
        })
        return fetchRequest.send();
    }
    function updateRecord(order) {
        var fetchRequest = new ej.base.Fetch({
            url: `@fullUrl?handler=UpdateOrder&OrderID=${order.OrderID}`,
            type: 'POST',
            beforeSend: function (args) {
                args.fetchRequest.headers.set('XSRF-TOKEN', document.querySelector('input[type = "hidden"][name = "__RequestVerificationToken"]').value);
            },
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(order)
        })
        return fetchRequest.send();
    }
    // delete
    function deleteRecord(primaryKey) {
        var fetchRequest = new ej.base.Fetch({
            url: `@fullUrl?handler=DeleteOrder&id=${primaryKey}`,
            type: 'POST',
            beforeSend: function (args) {
                args.fetchRequest.headers.set('XSRF-TOKEN', document.querySelector('input[type = "hidden"][name = "__RequestVerificationToken"]').value);
            },
            contentType: 'application/json; charset=utf-8',
            body: JSON.stringify({
                key: primaryKey
            })
        })
        return fetchRequest.send();
    }
</script> 