<div class="control-section" style="display: flex;">
    <div class="col-lg-3 property-section" style="margin-right: 20px;">
        <table style="width: 100%;">
            <tr>
                <td style="padding-top: 10px;">Column Fields</td>
                <td>
                    <ejs-dropdownlist id="columnFields" placeholder="Select field"></ejs-dropdownlist>
                </td>
            </tr>
            <tr>
                <td style="padding-top: 15px;">Enable Custom Validation</td>
                <td>
                    <ejs-checkbox id="customValidationCheckbox" disabled="true"></ejs-checkbox>
                </td>
            </tr>
        </table>
    </div>

    <div class="col-md-8">
        <ejs-grid id="grid" dataSource="@ViewBag.DataSource" actionBegin="actionBegin" allowPaging="true" toolbar="@(new List<string> { "Add", "Edit", "Delete", "Update", "Cancel" })">
            <e-grid-pagesettings pageCount="5"></e-grid-pagesettings>
            <e-grid-editsettings allowEditing="true" allowAdding="true" allowDeleting="true" showAddNewRow="true"></e-grid-editsettings>
            <e-grid-columns>
                <e-grid-column field="OrderID" headerText="Order ID" width="120" isPrimaryKey="true" textAlign="Right" validationRules="@(new { required = true, number = true })"></e-grid-column>
                <e-grid-column field="CustomerID" headerText="Customer ID" width="120" validationRules="@(new { required = true, minLength = 5 })"></e-grid-column>
                <e-grid-column field="Freight" headerText="Freight" width="180" format="C2" editType="numericedit" textAlign="Right" validationRules="@(new { required = true, min = 0 })"></e-grid-column>
                <e-grid-column field="OrderDate" headerText="Order Date" width="130" editType="datetimepickeredit" textAlign="Right" format="@(new { type = "dateTime", format = "M/d/y hh:mm a" })"></e-grid-column>
                <e-grid-column field="ShipCountry" headerText="Ship Country" width="150" editType="dropdownedit" edit="@(new { @params = new { popupHeight = 300 } })"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var dropdownObj = document.getElementById('columnFields').ej2_instances[0];
        var checkboxObj = document.getElementById('customValidationCheckbox').ej2_instances[0];
        var gridObj = document.getElementById('grid').ej2_instances[0];

        let columnsConfig = [
            { field: 'OrderID', headerText: 'Order ID' },
            { field: 'CustomerID', headerText: 'Customer ID' },
            { field: 'Freight', headerText: 'Freight' },
            { field: 'OrderDate', headerText: 'Order Date' },
            { field: 'ShipCountry', headerText: 'Ship Country' }
        ];

        dropdownObj.dataSource = columnsConfig.map(c => ({ text: c.headerText, value: c.field }));
        dropdownObj.fields = { text: 'text', value: 'value' };
        dropdownObj.dataBind();

        let selectedField = null;

        dropdownObj.addEventListener('change', function (e) {
            selectedField = e.value;
            checkboxObj.disabled = false;

            if (checkboxObj.checked) {
                addValidation(selectedField); // Apply validation if checkbox is already checked.
            }
        });

        checkboxObj.addEventListener('change', function (e) {
            if (!selectedField) return;

            if (e.checked) {
                addValidation(selectedField);
            } else {
                resetValidation(selectedField);
            }
        });

        function actionBegin(args) {
            if (args.requestType === 'save') {
                // Add logic if needed for save request.
              }
        }

        //Apply custom validation to the selected column.
        function addValidation(field) {
            gridObj.columns.forEach(col => {
                if (col.field === field) {
                    col.validationRules = {
                        required: [customFn, 'Custom required rule applied for this field.']
                    };
                    gridObj.editModule?.formObj?.addRules(field, col.validationRules);
                } else if (col.isPrimaryKey) {
                    col.validationRules = { required: true };
                    gridObj.editModule?.formObj?.addRules(col.field, col.validationRules);
                } else {
                    col.validationRules = null;
                    gridObj.editModule?.formObj?.removeRules(col.field);
                }
            });

            gridObj.editModule?.formObj && gridObj.closeEdit();
        }

        function resetValidation(field) {
            let col = gridObj.getColumnByField(field);
            if (col.isPrimaryKey) {
                col.validationRules = { required: true };
                gridObj.editModule?.formObj?.addRules(col.field, col.validationRules);
            } else {
                col.validationRules = null;
                gridObj.editModule?.formObj?.removeRules(col.field);
            }

            gridObj.editModule?.formObj && gridObj.closeEdit();
        }

        function customFn(args) {
            return args.value !== '' && args.value !== undefined;
        }
    });
</script>
