<div style="display: flex">
    <label style="margin: 3px 5px 5px 0px">Select column to disable editing: </label>
    <span style="height:fit-content; margin-bottom:10px">
        @Html.EJS().DropDownList("DropDown").Width("180px").DataSource(@ViewBag.dropdownData).Index(0).Change("change").Render()
    </span>
</div>

@Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).Columns(col =>
{
    col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).Width("120").ValidationRules(new { required = true, number = true }).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("CustomerID").HeaderText("Customer ID").ValidationRules(new { required = true }).Width("120").Add();
    col.Field("Freight").HeaderText("Freight").Width("120").EditType("numericedit").ValidationRules(new { required = true }).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Format("C2").Add();
    col.Field("OrderDate").HeaderText("Order Date").Width("130").EditType("datepickeredit").Format("yMd").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("ShipCountry").HeaderText("Ship Country").EditType("dropdownedit").ValidationRules(new { required = true }).Width("150").Add();
}).EditSettings(edit => { edit.AllowAdding(true).AllowEditing(true).AllowDeleting(true); }).Toolbar(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" }).Render()

<script>
    var currentColumn;
    function change(args) {
        // Reset the allowEditing property of the previously selected column
        if (currentColumn) {
            currentColumn.allowEditing = true;
        }
        // Update the 'allowEditing' property for the selected column
        var grid = document.getElementById("Grid").ej2_instances[0];
        currentColumn = grid.getColumnByField(args.value);
        currentColumn.allowEditing = false;
    }
</script>