@{
    var valueAccessor = "valueAccessor";
}

@Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).Columns(col =>
{
    col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).Width("100").ValidationRules(new { required = "true", number = true }).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("CustomerID").HeaderText("Customer ID").ValidationRules(new { required = "true" }).Width("120").Add();
    col.Field("Freight").HeaderText("Freight").EditType("numericedit").ValidationRules(new { required = "true", min = 1, max = 1000 }).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("120").Add();
    col.Field("OrderDate").HeaderText("Order Date").ValidationRules(new { required = true }).Width("130").EditType("datepickeredit").Format("yMd").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
    col.Field("ShipAddress").HeaderText("Ship Address").ValueAccessor("valueAccessor").DisableHtmlEncode(true).Edit(new { create = "createShipAddressFn", read = "readShipAddressFn", destroy = "destroyShipAddressFn", write = "writeShipAddressFn" }).ValidationRules(new { required = true }).Width("150").Add();
}).EditSettings(edit => { edit.AllowAdding(true).AllowEditing(true).AllowDeleting(true).Mode(Syncfusion.EJ2.Grids.EditMode.Normal); }).Toolbar(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" }).Render()

<script>
    function createShipAddressFn() {
        textboxElement = document.createElement('textarea');
        return textboxElement;
    }
    function destroyShipAddressFn() {
        textboxObject.destroy();
    }
    function readShipAddressFn() {
        return textboxObject.value;
    }

    function writeShipAddressFn(args) {
        var rowData = args.rowData;
        textboxObject = new ej.inputs.TextBox({
            multiline: true,
            value: rowData.ShipAddress,
        });
        textboxObject.appendTo(textboxElement);
    }

    function valueAccessor(field, data) {
        var value = data.ShipAddress;
        return (value !== undefined) ? value.split('\n').join('<br>') : '';
    }
</script>