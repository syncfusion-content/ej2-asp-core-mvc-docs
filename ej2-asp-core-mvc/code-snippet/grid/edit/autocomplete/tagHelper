<ejs-grid id="Grid" dataSource="@ViewBag.DataSource" toolbar="@( new List<object>() {"Add","Edit","Delete","Update","Cancel"})">
    <e-grid-editsettings allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editsettings>
    <e-grid-columns>
        <e-grid-column field="OrderID" headerText="Order ID" isPrimaryKey="true" validationRules="@(new { required= true })" textAlign="Right" width="120"></e-grid-column>
        <e-grid-column field="CustomerID" headerText="Customer ID" width="120" edit="@(new {create = "createCustomerIDHandler", read = "readCustomerIDHandler", destroy = "destroyCustomerIDHandler", write = "writeCustomerIDHandler"})"></e-grid-column>
        <e-grid-column field="Freight" headerText="Freight" editType="numericedit" textAlign="Right" format="C2" width="120"></e-grid-column>
        <e-grid-column field="OrderDate" headerText="Order Date" format="yMd" editType="datepickeredit" width="130"></e-grid-column>
        <e-grid-column field="ShipCountry" headerText="Ship Country" width="150"></e-grid-column>
    </e-grid-columns>
</ejs-grid>

<script>
    var autoCompleteData = [
        { CustomerID: 'VINET', Id: '1' },
        { CustomerID: 'TOMSP', Id: '2' },
        { CustomerID: 'HANAR', Id: '3' },
        { CustomerID: 'VICTE', Id: '4' },
        { CustomerID: 'SUPRD', Id: '5' },
    ];
    var autoCompleteObj;
    var autoCompleteElement;

    function createCustomerIDHandler() {
        autoCompleteElement = document.createElement('input');
        return autoCompleteElement;
    }
    function readCustomerIDHandler() {
        return autoCompleteObj.value;
    }
    function destroyCustomerIDHandler() {
        autoCompleteObj.destroy();
    }
    function writeCustomerIDHandler(args) {
        var rowData = args.rowData;
        autoCompleteObj = new ej.dropdowns.AutoComplete({
            allowCustom: true,
            dataSource: autoCompleteData,
            fields: { value: "CustomerID", text: "CustomerID" },
            value: rowData.CustomerID,
        });
        autoCompleteObj.appendTo(autoCompleteElement);
    }
</script>