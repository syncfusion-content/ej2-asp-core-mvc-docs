<ejs-grid id="Grid" dataSource="@ViewBag.DataSource" allowFiltering="true" height="275px">
    <e-grid-columns>
        <e-grid-column field="OrderID" headerText="Order ID" textAlign="Right" width="100"></e-grid-column>
        <e-grid-column field="CustomerID" headerText="Customer ID" width="120"></e-grid-column>
        <e-grid-column field="Freight" headerText="Freight" textAlign="Right" format="C2" width="120"></e-grid-column>          
        <e-grid-column field="OrderDate" headerText="Order Date" textAlign="Right" format="yMd" width="120"></e-grid-column>          
        <e-grid-column field="ShipCity" headerText="Ship City" width="100"></e-grid-column>
        <e-grid-column field="ShipName" headerText="Ship Name" width="100"></e-grid-column>
    </e-grid-columns>
</ejs-grid>
<script>

    let shipCityDistinctData = DataUtil.distinct(data, 'ShipCity', true);
    let shipCountryDistinctData = DataUtil.distinct(data, 'ShipCountry', true);
    
    let dropdown;
    let numElement;
    let dateElement;
    let comboElement;
    let multiSelectElement;
    
    let templateOptionsDropDown = {
        create: () => {
            dropdown = document.createElement('select');
            dropdown.id = 'CustomerID';
            let option = document.createElement('option');
            option.value = 'All';
            option.innerText = 'All';
            dropdown.appendChild(option);
            data.forEach((item) => {
                let option = document.createElement('option');
                option.value = (item).CustomerID;
                option.innerText = (item).CustomerID;
                dropdown.appendChild(option);
            });
            return dropdown;
        },
        write: () => {
            let dropdownlist = new DropDownList({
                change: (args) => {
                    var grid = document.getElementById("Grid").ej2_instances[0];
                    if (args.value !== 'All') {
                        grid.filterByColumn(args.item.parentElement.id.replace('_options', ''), 'equal', args.value);
                    } else {
                        grid.removeFilteredColsByField(args.item.parentElement.id.replace('_options', ''));
                    }
                }
            });
            dropdownlist.appendTo(dropdown);
        },
    };
    
    let templateOptionsNumericTextBox = {
        create: () => {
            numElement = document.createElement('input');
            return numElement;
        },
        write: () => {
            let numericTextBox = new NumericTextBox({
                format: '00.00',
                value: 10,
            });
            numericTextBox.appendTo(numElement);
        },
    };
    
    let templateOptionsDatePicker = {
        create: () => {
            dateElement = document.createElement('input');
            return dateElement;
        },
        write: (args) => {
            let datePickerObj = new DatePicker({
                value: new Date(args.column.field),
                change: handleFilterChange,
            });
            datePickerObj.appendTo(dateElement);
        },
    };
    
    let templateOptionsComboBox = {
        create: () => {
            comboElement = document.createElement('input');
            comboElement.id = 'ShipCity';
            return comboElement;
        },
        write: (args) => {
            let comboBox = new ComboBox({
                value: args.value,
                placeholder: 'Select a city',
                change: handleFilterChange,
                dataSource: shipCityDistinctData.map((item) => (item).ShipCity),
            });
            comboBox.appendTo(comboElement);
        },
    };
    
    let templateOptionsMultiSelect = {
        create: () => {
            multiSelectElement = document.createElement('input');
            multiSelectElement.id = 'ShipCountry';
            return multiSelectElement;
        },
        write: (args) => {
            let multiselect = new MultiSelect({
                value: args.value,
                placeholder: 'Select a country',
                change: multiselectFunction,
                dataSource: shipCountryDistinctData.map((item) => (item).ShipCountry),
            });
            multiselect.appendTo(multiSelectElement);
        },
    };
    
    let handleFilterChange = (args) => {
        let targetElement = parentsUntil(args.element, 'e-filtertext');
        let columnName = targetElement.id.replace('_filterBarcell', '');
        var grid = document.getElementById("Grid").ej2_instances[0];
        if (args.value) {
            grid.filterByColumn(columnName, 'equal', args.value);
        } else {
            grid.removeFilteredColsByField(columnName);
        }
    };
    
    let multiselectFunction = (args) => {
        let selectedValues = args.value;
        var grid = document.getElementById("Grid").ej2_instances[0];
        if (selectedValues.length === 0) {
            let OrginalData = new DataManager(data).executeLocal(new Query());
            grid.dataSource = OrginalData;
        } else {
            let predicate = [];
            for (let x = 0; x < selectedValues.length; x++) {
                predicate = predicate.length === 0 ? new Predicate('ShipCountry', 'equal', selectedValues[x]) : predicate.or('ShipCountry', 'equal', selectedValues[x]);
            }
            let filteredData = new DataManager(data).executeLocal(new Query().where(predicate));
            grid.dataSource = filteredData;
        }
    };
    </script>