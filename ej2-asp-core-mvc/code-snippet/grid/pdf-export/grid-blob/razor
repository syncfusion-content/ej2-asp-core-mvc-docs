@Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).AllowPdfExport(true).PdfExportComplete("pdfExportComplete").ToolbarClick("toolbarClick").Columns(col =>
    {
        col.Field("OrderID").HeaderText("Order ID").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width(90).Add();
        col.Field("CustomerID").HeaderText("Customer ID").Width(100).Add();
        col.Field("Freight").HeaderText("Freight").Width(80).Add();
        col.Field("ShipName").HeaderText("Ship Name").Width(120).Add();
    }).Toolbar(new List<string>() { "PdfExport" }).Height(272).Render()
<script>
function toolbarClick(args) {
    let grid = document.getElementById("Grid").ej2_instances[0];
    if (args.item.id === 'Grid_pdfexport') {
        // pass fourth parameter as true to get the blob data of exported grid
        grid.pdfExport(undefined, undefined, undefined, true);
    }
}

function pdfExportComplete(args) {
    // execute the promise to get the blob data
    if (args && args.promise) {
        // Execute the promise to get the blob data
        args.promise.then(function (e) {
            exportBlob(e.blobData);
        });
    }
};

function exportBlob(blob) {
    let a = document.createElement('a');
    document.body.appendChild(a);
    a.style.display = 'none';
    let url = window.URL.createObjectURL(blob); // Fix typo here
    a.href = url;
    a.download = 'Export';
    a.click();
    window.URL.revokeObjectURL(url); // Fix typo here
    document.body.removeChild(a);
}
</script>