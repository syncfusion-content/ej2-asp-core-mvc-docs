@Html.EJS().Chart("container").Series(series =>
       {
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Area)
                .Name("Product X")
                .XName("x")
                .YName("y")
                .Border(br => br.Width(0.5).Color("#00bdae"))
                .Animation(an => an.Enable(false))
                .DataSource("series1").
                .Add();
       }
       ).PrimaryXAxis(px => px.ScrollbarSettings(scroll => scroll.Enable(true).EnableZoom(false).Height(14).TrackRadius(8).ScrollbarRadius(8).GripColor("transparent").TrackColor("yellow").ScrollbarColor("red").Position(Syncfusion.EJ2.Charts.ScrollbarPosition.Bottom)).
       ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).ZoomFactor(0.2).ZoomPosition(0.6)
       ).PrimaryXAxis(px => px.ScrollbarSettings(scroll => scroll.Enable(true).EnableZoom(false).Height(14).TrackRadius(8).ScrollbarRadius(8).GripColor("transparent").TrackColor("yellow").ScrollbarColor("red").Position(Syncfusion.EJ2.Charts.ScrollbarPosition.Right))
       ).LegendSettings(legend => legend.Visible(false)
       ).ZoomSettings(z => z.EnableScrollbar(true).EnableSelectionZooming(true).Mode(Syncfusion.EJ2.Charts.ZoomMode.X)).Title("Sales History of Product X").Render()

<script>
    var series1 = [];
    var point1;
    var value = 40;
    var i;
    for (i = 1; i < 500; i++) {
        if (Math.random() > 0.5) {
            value += Math.random();
        }
        else {
            value -= Math.random();
        }
        point1 = { x: new Date(1950, i + 2, i), y: value.toFixed(1) };
        series1.push(point1);
    }
</script>